import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.cc795e4d.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/js/js-day01.md","filePath":"note/js/js-day01.md"}'),p={name:"note/js/js-day01.md"},o=l(`<h2 id="js-第一天" tabindex="-1">js 第一天 <a class="header-anchor" href="#js-第一天" aria-label="Permalink to &quot;js 第一天&quot;">​</a></h2><h3 id="什么是-js" tabindex="-1">什么是 js <a class="header-anchor" href="#什么是-js" aria-label="Permalink to &quot;什么是 js&quot;">​</a></h3><p>js 是一种运行在客户端（浏览器）的脚本语言，常用来做一些页面交互效果或创建动态更新的内容</p><h3 id="js-书写位置" tabindex="-1">js 书写位置 <a class="header-anchor" href="#js-书写位置" aria-label="Permalink to &quot;js 书写位置&quot;">​</a></h3><p><strong>1.行内 js</strong></p><p>将 js 代码直接书写在 html 标签内部，一个使用行内样式的例子：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">alert</span><span style="color:#9ECBFF;">(&#39;逗你玩~&#39;)&quot;</span><span style="color:#E1E4E8;">&gt;点我月薪过万&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">alert</span><span style="color:#032F62;">(&#39;逗你玩~&#39;)&quot;</span><span style="color:#24292E;">&gt;点我月薪过万&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>2.内部 js</strong></p><p>在 <code>&lt;/body&gt;</code> 结束标签的上方，先添加 script 标签，然后在标签中书写 js 代码：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello World！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello World！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><blockquote><p>js 代码要放在 body 标签的末尾，以确保其在所有 html 元素加载完毕后再执行</p></blockquote><p><strong>3.外部 js</strong></p><p>在 <code>&lt;/body&gt;</code> 结束标签的上方，使用 script 标签引入一个外部 js 文件：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><blockquote><p>使用外部引入方式时，script 标签中间的代码会被忽略</p></blockquote><h3 id="js-注释" tabindex="-1">js 注释 <a class="header-anchor" href="#js-注释" aria-label="Permalink to &quot;js 注释&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 单行注释 Ctrl+/</span></span>
<span class="line"><span style="color:#6A737D;">/* 多行注释 Shift+Alt+A */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 单行注释 Ctrl+/</span></span>
<span class="line"><span style="color:#6A737D;">/* 多行注释 Shift+Alt+A */</span></span></code></pre></div><blockquote><p>注释会在 html 源代码中显示</p></blockquote><blockquote><p>; 是 js 语句的结束符，在 js 代码中，结束符要么都加，要么都不加</p></blockquote><h3 id="js-输入输出" tabindex="-1">js 输入输出 <a class="header-anchor" href="#js-输入输出" aria-label="Permalink to &quot;js 输入输出&quot;">​</a></h3><p>在学习前期了解一些 js 的输入输出语句可以让我们更方便地调试代码：</p><ul><li>alert()：弹出一个带有提示信息的弹窗</li><li>document.write()：输出 html 内容到网页上</li><li>console.log()：输出内容到浏览器的控制台</li><li>prompt()：弹出一个对话框来接收用户的输入</li></ul><p>一个综合使用输入输出语句的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prompt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入你的昵称：&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你输入的昵称是&quot;</span><span style="color:#E1E4E8;">, username);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prompt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入你的昵称：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你输入的昵称是&quot;</span><span style="color:#24292E;">, username);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/var.gif" alt="var"></p><blockquote><p>document.write() 中，如果要输出的内容包含 html 标签，会自动解析</p></blockquote><blockquote><p>prompt() 总是返回一个字符串型的数据，在做运算时要注意</p></blockquote><blockquote><p>prompt()、alert() 会阻塞程序的执行</p></blockquote><h3 id="js-变量" tabindex="-1">js 变量 <a class="header-anchor" href="#js-变量" aria-label="Permalink to &quot;js 变量&quot;">​</a></h3><p><strong>什么是变量</strong></p><p>变量是计算机用来存储数据的容器，变量中的数据是可变的，使用变量可以更方便地使用和修改数据</p><p><strong>变量的声明和赋值</strong></p><p>使用 let 关键字来声明一个变量：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myname;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myname;</span></span></code></pre></div><p>此时变量 name 中还没有任何数据，接下来给它一个值：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">myname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;小明&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;小明&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>此时再在控制台输出 name 变量，就可以打印出 name 变量保存的值了</p><p>注意，我们声明的是一个变量，变量的值是可以更改的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">myname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;小红&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;小红&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><blockquote><p>变量声明是在内存中开辟一块空间，用来存储数据；变量赋值是把数据存储到变量中</p></blockquote><blockquote><p>let 关键字声明的变量是唯一的，重复声明同一个变量会报错，就像下面这样</p></blockquote><p><img src="https://post-src.wyun521.top/images/image-20230815102420393.png" alt="image-20230815102420393"></p><p><strong>变量的初始化</strong></p><p>使用变量初始化可以更快地完成变量的声明和赋值：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 变量的初始化=变量声明+赋值</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;小明&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 变量的初始化=变量声明+赋值</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;小明&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="js-常量" tabindex="-1">js 常量 <a class="header-anchor" href="#js-常量" aria-label="Permalink to &quot;js 常量&quot;">​</a></h3><p><strong>什么是常量</strong></p><p>常量和变量一样，也是用来保存数据的，只不过这个数据是不可变的</p><ul><li><p>常量中的数据不允许修改</p></li><li><p>必须在声明后就赋值</p></li></ul><p>如果强制修改常量的值，就会出现下面的错误：</p><p><img src="https://post-src.wyun521.top/images/image-20230815105426226.png" alt="image-20230815105426226"></p><p><strong>常量的使用</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(pi);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(pi);</span></span></code></pre></div><h3 id="js-标识符" tabindex="-1">js 标识符 <a class="header-anchor" href="#js-标识符" aria-label="Permalink to &quot;js 标识符&quot;">​</a></h3><p>标识符可以作为变量名、常量名、函数名等</p><p>标识符的命名规则：</p><ul><li>由字母、数字、下划线、美元符组成，不能以数字开头</li><li>不能使用 js 中的关键字或保留字</li><li>严格区分大小写</li></ul><blockquote><p>标识符不能使用中横线，因为 js 会把它当做减法处理</p></blockquote><blockquote><p>标识符要见名知意，最好采用驼峰命名法，如 userName</p></blockquote><p><img src="https://post-src.wyun521.top/images/image-20230815112340335.png" alt="image-20230815112340335"></p><h3 id="js-数据类型" tabindex="-1">js 数据类型 <a class="header-anchor" href="#js-数据类型" aria-label="Permalink to &quot;js 数据类型&quot;">​</a></h3><h4 id="数据类型划分" tabindex="-1">数据类型划分 <a class="header-anchor" href="#数据类型划分" aria-label="Permalink to &quot;数据类型划分&quot;">​</a></h4><p>为什么要对数据分门别类？</p><ul><li>预分配空间，节省内存</li><li>分门别类更方便管理</li></ul><h4 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h4><ul><li>number 数值型（包含整数、小数和 NaN）</li><li>string 字符串（引号包裹的一段文本）</li><li>boolean 布尔型（只有 true 和 false 两个值）</li><li>undefined 未定义型（变量只声明未赋值）</li><li>null 空类型（变量已赋值但内容为空）</li></ul><blockquote><p>关于字符串的几个注意点：</p><ul><li>在 js 中，string 属于基本数据类型</li><li>无论什么类型的数据，只要使用引号包裹，就会成为字符串</li><li>双层嵌套引号时，采用 “外双内单，外单内双” 的写法</li></ul></blockquote><h4 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h4><ul><li>Object 对象</li><li>Function 函数</li><li>Array 数组</li></ul><h4 id="数据类型校验" tabindex="-1">数据类型校验 <a class="header-anchor" href="#数据类型校验" aria-label="Permalink to &quot;数据类型校验&quot;">​</a></h4><p><code>typeof </code> 可以检验变量的数据类型：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;number&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;blubber&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;boolean&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> undeclaredVariable);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;undefined&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;object&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;number&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;blubber&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;boolean&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> undeclaredVariable);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;undefined&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: &quot;object&quot;</span></span></code></pre></div><blockquote><p>typeof null 返回 object 类型，这是 js 中一个远古的 bug</p></blockquote><h4 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h4><p>模板字符串可以更方便地拼接字符串和变量，语法： <code>\${变量名}</code></p><p>一般的字符串拼接</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你好！我是&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;，今年&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;岁了&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你好！我是&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;，今年&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;岁了&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>使用模板字符串后</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`你好！我是\${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}，今年\${</span><span style="color:#E1E4E8;">age</span><span style="color:#9ECBFF;">}岁了\`</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`你好！我是\${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}，今年\${</span><span style="color:#24292E;">age</span><span style="color:#032F62;">}岁了\`</span><span style="color:#24292E;">);</span></span></code></pre></div><blockquote><p>模板字符串外层必须使用反引号包裹，中间可以换行</p></blockquote><blockquote><p>模板字符串在之后学习 vue 时也会经常用到</p></blockquote><h3 id="js-运算符" tabindex="-1">js 运算符 <a class="header-anchor" href="#js-运算符" aria-label="Permalink to &quot;js 运算符&quot;">​</a></h3><h4 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h4><p>js 提供了一些符号用来做数学运算：</p><ul><li>加减乘除</li><li>% 求余：常用来判断某个数字能否被整除</li></ul><p>算数运算符存在隐式转换（加法除外），里面只有数字的字符串默认会被转换为 number 类型</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//5</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;5&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//51，加法没有隐式转换</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;5&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//4，js做了隐式转换</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;伍&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//number</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//5</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//51，加法没有隐式转换</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//4，js做了隐式转换</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;伍&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//number</span></span></code></pre></div><blockquote><p>在计算失败时，显示的结果是 NaN （not a number）。有趣的是，NaN 是一个 number 型的数据</p></blockquote><p>一个使用算数运算符的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> price </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prompt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入商品单价：&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prompt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入数量：&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rst </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> price;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`小计：￥\${</span><span style="color:#E1E4E8;">rst</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> price </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prompt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入商品单价：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prompt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入数量：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rst </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> price;</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`小计：￥\${</span><span style="color:#24292E;">rst</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/shop-jisuan.gif" alt="shop-jisuan"></p><h4 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h4><p>使用赋值运算符可以简化代码，一步完成运算和赋值。比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">num </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// num = num + 3</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">num </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// num = num + 3</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num);</span></span></code></pre></div><blockquote><p>其他的赋值运算符还有 <code>+=、-=、*=、/=、%=</code></p></blockquote><h4 id="自增自减运算符" tabindex="-1">自增自减运算符 <a class="header-anchor" href="#自增自减运算符" aria-label="Permalink to &quot;自增自减运算符&quot;">​</a></h4><p>自增、自减运算符的作用是让变量的值在原来的基础上加 1 或减 1，常配合 for 循环使用</p><p>在参与运算时，符号的位置不同，可能会导致不同的结果</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//num=5+5=10 b=6</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">b; </span><span style="color:#6A737D;">//num=5+7=12 b=7</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num, num2); </span><span style="color:#6A737D;">// 10 12</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//num=5+5=10 b=6</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">b; </span><span style="color:#6A737D;">//num=5+7=12 b=7</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num, num2); </span><span style="color:#6A737D;">// 10 12</span></span></code></pre></div><blockquote><p>++i 先运算再赋值</p><p>i++ 先赋值再参与运算</p></blockquote><h4 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h4><p>比较运算符用来比较两个数据大小、是否相等，根据比较结果返回一个布尔值（true / false）</p><p><img src="https://post-src.wyun521.top/images/image-20230815162028542.png" alt="image-20230815162028542"></p><p><img src="https://post-src.wyun521.top/images/bijiao.png" alt="bijiao"></p><blockquote><p>比较运算符和下面的逻辑运算符常用在流程控制语句中，比如 if-else 语句</p></blockquote><blockquote><p>关于 js 的数据类型和流程控制语句，接下来会看到</p></blockquote><h4 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h4><p>逻辑运算符的使用场景是把多个布尔值放到一起运算，最终返回一个布尔值</p><p><img src="https://post-src.wyun521.top/images/image-20230815162212235.png" alt="image-20230815162212235"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 判断是否为闰年</span></span>
<span class="line"><span style="color:#6A737D;">//年份能被4整除而不能被100整除的为闰年</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;">prompt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入一个数：&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rst </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 判断是否为闰年</span></span>
<span class="line"><span style="color:#6A737D;">//年份能被4整除而不能被100整除的为闰年</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#6F42C1;">prompt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入一个数：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rst </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre></div><p><strong>逻辑中断</strong></p><p><code>&amp;&amp;</code> 左边的表达式为假时，不会再执行右边的表达式，直接返回左边表达式的计算结果</p><p><code>||</code> 左边的表达式为真时，不会再执行右边的表达式，直接返回左边表达式的计算结果</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230819103014502.png" alt="image-20230819103014502"></p><p>逻辑中断的一个应用是在变量为 undefined 时返回右边的值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 如果x有值就用x，如果没有值就用0</span></span>
<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 如果x有值就用x，如果没有值就用0</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre></div><blockquote><p>如果没有短路，就会返回右边表达式的计算结果</p></blockquote><h4 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h4><p><img src="https://post-src.wyun521.top/images/youxian.png" alt="youxian"></p><blockquote><p>我们不应该依赖运算符优先级来判断计算的先后次序，表达式应清晰明了，最好使用小括号来决定运算顺序</p></blockquote>`,121),e=[o];function t(c,r,y,E,i,u){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{h as __pageData,g as default};
