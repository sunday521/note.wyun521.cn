import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.cc795e4d.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/tool/node-day02.md","filePath":"note/tool/node-day02.md"}'),l={name:"note/tool/node-day02.md"},p=o(`<h2 id="node-day02-模块化" tabindex="-1">node-day02-模块化 <a class="header-anchor" href="#node-day02-模块化" aria-label="Permalink to &quot;node-day02-模块化&quot;">​</a></h2><h3 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h3><h4 id="什么是模块化" tabindex="-1">什么是模块化 <a class="header-anchor" href="#什么是模块化" aria-label="Permalink to &quot;什么是模块化&quot;">​</a></h4><p><code>模块化</code>：可以把项目中的每个文件都看做是一个模块。模块之间彼此独立，使用特定语法进行导入导出</p><p><code>模块化的好处</code>：</p><ul><li>提高代码复用性</li><li>实现按需加载</li><li>作用域独立</li></ul><p><code>CommonJS标准</code> 和 <code>ECMAScript标准</code> 是两种常见的模块导入导出的语法标准</p><h4 id="commonjs-标准" tabindex="-1">CommonJS 标准 <a class="header-anchor" href="#commonjs-标准" aria-label="Permalink to &quot;CommonJS 标准&quot;">​</a></h4><p><code>CommonJS标准</code> 是 Node 默认的导入导出语法规范</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkUsername</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">uname</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> uname.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkPwd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pwd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> pwd.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 导出一个对象</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  checkUsername,</span></span>
<span class="line"><span style="color:#E1E4E8;">  checkPwd,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkUsername</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">uname</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> uname.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkPwd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">pwd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 导出一个对象</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  checkUsername,</span></span>
<span class="line"><span style="color:#24292E;">  checkPwd,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对于导入的对象，可以直接解构赋值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">checkUsername</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">checkPwd</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./utils/check.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkUsername</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pc666888&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkPwd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对于导入的对象，可以直接解构赋值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">checkUsername</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">checkPwd</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./utils/check.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">checkUsername</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pc666888&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">checkPwd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><blockquote><p>对于内置模块，导入时只写模块名就行；对于自定义模块，导入时需要写文件完整路径（包括文件后缀）</p></blockquote><h4 id="ecmascript-标准" tabindex="-1">ECMAScript 标准 <a class="header-anchor" href="#ecmascript-标准" aria-label="Permalink to &quot;ECMAScript 标准&quot;">​</a></h4><p><code>ECMAScript标准</code> 是 ES6 新增的导入导出语法，在现代前端工程化中最为常用</p><p>ES6 模块的设计思想是尽量的静态化，使得 <code>编译时</code> 就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 模块 和 AMD 模块，都只能在 <code>运行时</code> 确定这些东西</p><p><img src="https://post-src.wyun521.top/images/image-20230920121006166.png" alt="image-20230920121006166"></p><blockquote><p>要在 Node.js 中使用 ECMAScript 标准语法，需要在项目根目录中新建 <code>package.json</code> 文件，并设置 <code>{&quot;type&quot;:&quot;module&quot;}</code> 属性</p></blockquote><h5 id="默认导入导出" tabindex="-1">默认导入导出 <a class="header-anchor" href="#默认导入导出" aria-label="Permalink to &quot;默认导入导出&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkUsername</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">uname</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> uname.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkPwd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pwd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> pwd.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 导出一个对象</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> { checkUsername, checkPwd };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkUsername</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">uname</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> uname.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkPwd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">pwd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 导出一个对象</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> { checkUsername, checkPwd };</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对于导入的对象，必须先用一个变量接收</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> check </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./utils/check.js&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">checkUsername</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">checkPwd</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> check;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkUsername</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pc666888&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkPwd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对于导入的对象，必须先用一个变量接收</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> check </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./utils/check.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">checkUsername</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">checkPwd</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> check;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">checkUsername</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pc666888&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">checkPwd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><blockquote><p>一个模块只能有一个默认导出语句</p></blockquote><blockquote><p>默认导出不能直接解构赋值，必须用一个变量接收，变量名是可以自定义的</p></blockquote><h5 id="命名导入与导出" tabindex="-1">命名导入与导出 <a class="header-anchor" href="#命名导入与导出" aria-label="Permalink to &quot;命名导入与导出&quot;">​</a></h5><p>使用 <code>命名导入/导出</code> 可以实现模块的按需加载：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 写法一：单独导出</span></span>
<span class="line"><span style="color:#6A737D;">// export后的修饰定义语句可以是：函数、类或普通变量</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkUsername</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">uname</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> uname.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkPwd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pwd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> pwd.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 写法二：统一导出为对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkUsername</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">uname</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> uname.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkPwd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pwd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> pwd.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { checkUsername, checkPwd };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 写法一：单独导出</span></span>
<span class="line"><span style="color:#6A737D;">// export后的修饰定义语句可以是：函数、类或普通变量</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkUsername</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">uname</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> uname.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkPwd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">pwd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 写法二：统一导出为对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkUsername</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">uname</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> uname.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkPwd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">pwd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { checkUsername, checkPwd };</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对于导入的对象，可以直接解构赋值</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { checkUsername, checkPwd } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./utils/check.js&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkUsername</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pc666888&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkPwd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对于导入的对象，可以直接解构赋值</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { checkUsername, checkPwd } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./utils/check.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">checkUsername</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pc666888&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">checkPwd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p><strong>在 html 引入 js 模块</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- defer （默认）异步模块加载模式，等待html全部渲染完再执行 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;./foo.js&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defer</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- async 异步模块加载模式，加载完就执行 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;./foo.js&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- defer （默认）异步模块加载模式，等待html全部渲染完再执行 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;./foo.js&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defer</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- async 异步模块加载模式，加载完就执行 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;./foo.js&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230919220549395.png" alt="image-20230919220549395"></p><h3 id="包管理" tabindex="-1">包管理 <a class="header-anchor" href="#包管理" aria-label="Permalink to &quot;包管理&quot;">​</a></h3><h4 id="什么是软件包" tabindex="-1">什么是软件包 <a class="header-anchor" href="#什么是软件包" aria-label="Permalink to &quot;什么是软件包&quot;">​</a></h4><p><code>软件包</code>：本质就是一个文件夹，内部封装了工具和方法供开发者使用。根目录中必须要有 <code>package.json</code> 文件（记录软件包的名字，作者，入口文件，依赖包等信息）</p><p><code>软件包的分类</code>：</p><ul><li><code>本地软件包</code>：仅在当前项目内使用，封装属性和方法，存在于项目根目录下的 <code>node_modules</code> 中</li><li><code>全局软件包</code>：本机所有项目都可能会使用，封装命令和工具，存在于系统全局位置（如 hexo 命令）</li></ul><blockquote><p>在导入三方软件包时，默认入口文件是 index.js，我们也可以在 <code>package.json</code> 中使用 <code>main</code> 属性自定义入口文件的位置</p></blockquote><h4 id="使用-npm-管理软件包" tabindex="-1">使用 npm 管理软件包 <a class="header-anchor" href="#使用-npm-管理软件包" aria-label="Permalink to &quot;使用 npm 管理软件包&quot;">​</a></h4><table><thead><tr><th>命令</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td><code>npm init -y</code></td><td>初始化一个 <code>package.json</code> 文件</td><td>-y 跳过填写信息</td></tr><tr><td><code>npm install &lt;module&gt;</code></td><td>安装指定依赖包</td><td>-g 全局安装 | --save-dev 安装开发时的依赖</td></tr><tr><td><code>npm install</code></td><td>安装所有依赖包</td><td>通常用来生成 node_modules</td></tr></tbody></table><blockquote><p><a href="https://blog.csdn.net/qq575792372/article/details/122150069" target="_blank" rel="noreferrer">点击查看更多 npm 命令</a></p></blockquote><h3 id="同源和跨域" tabindex="-1">同源和跨域 <a class="header-anchor" href="#同源和跨域" aria-label="Permalink to &quot;同源和跨域&quot;">​</a></h3><h4 id="什么是同源策略" tabindex="-1">什么是同源策略 <a class="header-anchor" href="#什么是同源策略" aria-label="Permalink to &quot;什么是同源策略&quot;">​</a></h4><p><code>同源策略</code> 是浏览器中的一个重要的安全策略，它用于限制一个源的文档或者它加载的脚本如何才能与另一个源的资源进行交互，从而帮助阻隔恶意文档，减少被攻击的可能性</p><p><code>源</code>：特指 URL 中的 <code>协议、域名和端口号</code> 部分</p><p><code>同源</code>：如果两个 URL 的 <code>协议、域名和端口号</code> 都相同，那么这两个 URL 就是同源的</p><p><img src="https://post-src.wyun521.top/images/image-20230920162923656.png" alt="image-20230920162923656"></p><h4 id="什么是跨域访问" tabindex="-1">什么是跨域访问 <a class="header-anchor" href="#什么是跨域访问" aria-label="Permalink to &quot;什么是跨域访问&quot;">​</a></h4><p>在浏览器中，一个网页的脚本通过 ajax 请求另一个源的资源时，如果 <code>网页所在源</code> 和 <code>ajax 请求的源</code>（协议、域名或端口号）不完全相同，就会发生 <code>跨域访问</code>，导致请求失败</p><p><img src="https://post-src.wyun521.top/images/image-20230920211017860.png" alt="image-20230920211017860"></p><p><img src="https://post-src.wyun521.top/images/image-20230920164227063.png" alt="image-20230920164227063"></p><h4 id="解决跨域问题" tabindex="-1">解决跨域问题 <a class="header-anchor" href="#解决跨域问题" aria-label="Permalink to &quot;解决跨域问题&quot;">​</a></h4><p><strong>开发中-CORS 跨域资源共享</strong></p><p>前后端分离的项目，不在同一个源开发，为了保证正常的数据通信，可以采用 <code>CORS（Cross-Origin Resource Sharing）跨域资源共享</code> 机制</p><p><code>CORS的实现过程</code>：通过在服务端设置 <code>Access-Control-Allow-Origin</code> 响应头字段，标识允许跨域访问的源地址；浏览器在收到这个响应头后，就会允许跨域访问并将响应数据返回给前端页面</p><p><img src="https://post-src.wyun521.top/images/image-20230920165525510.png" alt="image-20230920165525510"></p><p><strong>上线后-同源访问</strong></p><p>把前端项目和后端项目部署到同一个源下，在保证安全性的前提下直接避免跨域访问的问题</p><blockquote><p><a href="https://juejin.cn/post/7017614708832206878" target="_blank" rel="noreferrer">良苦用心啊！我把 7 大跨域解决方法原理画成 10 张图，做成图解！</a></p></blockquote><blockquote><p><a href="https://juejin.cn/post/7252589598152458301" target="_blank" rel="noreferrer">三分钟，带你理解并解决前端跨域</a></p></blockquote>`,57),e=[p];function c(t,r,y,E,d,i){return a(),n("div",null,e)}const u=s(l,[["render",c]]);export{F as __pageData,u as default};
