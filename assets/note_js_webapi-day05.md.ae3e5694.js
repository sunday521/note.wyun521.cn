import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.cc795e4d.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/js/webapi-day05.md","filePath":"note/js/webapi-day05.md"}'),l={name:"note/js/webapi-day05.md"},p=o(`<h2 id="webapi-day05" tabindex="-1">webapi-day05 <a class="header-anchor" href="#webapi-day05" aria-label="Permalink to &quot;webapi-day05&quot;">​</a></h2><h3 id="bom-相关操作" tabindex="-1">BOM 相关操作 <a class="header-anchor" href="#bom-相关操作" aria-label="Permalink to &quot;BOM 相关操作&quot;">​</a></h3><h4 id="location-对象" tabindex="-1">location 对象 <a class="header-anchor" href="#location-对象" aria-label="Permalink to &quot;location 对象&quot;">​</a></h4><p><code>location</code> 对象表示一个地址，它拆分并保存了浏览器 URL 地址的各个组成部分：</p><p><img src="https://post-src.wyun521.top/images/image-20230829095825378.png" alt="image-20230829095825378"></p><p>下面是一个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;href:&quot;</span><span style="color:#E1E4E8;">, location.href);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;search:&quot;</span><span style="color:#E1E4E8;">, location.search);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hash:&quot;</span><span style="color:#E1E4E8;">, location.hash);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;href:&quot;</span><span style="color:#24292E;">, location.href);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;search:&quot;</span><span style="color:#24292E;">, location.search);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hash:&quot;</span><span style="color:#24292E;">, location.hash);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230829145911224.png" alt="image-20230829145911224"></p><p><strong>支付成功自动跳转</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#E1E4E8;">&gt;支付成功！&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;5&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;秒后自动跳转到首页&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;">&gt;支付成功！&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;5&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;秒后自动跳转到首页&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> timer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  num</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (num </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(timer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    location.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://www.jd.com&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  a.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`支付成功！&lt;span&gt;\${</span><span style="color:#E1E4E8;">num</span><span style="color:#9ECBFF;">}&lt;/span&gt;秒后自动跳转到首页\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  num</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (num </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(timer);</span></span>
<span class="line"><span style="color:#24292E;">    location.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://www.jd.com&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  a.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`支付成功！&lt;span&gt;\${</span><span style="color:#24292E;">num</span><span style="color:#032F62;">}&lt;/span&gt;秒后自动跳转到首页\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230829124538298.png" alt="image-20230829124538298"></p><blockquote><p>使用 location.href 跳转页面没有历史记录，不能前进和后退</p></blockquote><h4 id="navigator-对象" tabindex="-1">navigator 对象 <a class="header-anchor" href="#navigator-对象" aria-label="Permalink to &quot;navigator 对象&quot;">​</a></h4><p><code>navigator</code> 对象记录了用户浏览器的相关信息，其中的 <code>userAgent</code> 属性用来获取用户浏览器的版本及平台</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 检测访问设备是否是手机端</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userAgent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> navigator.userAgent;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 验证是否为Android或iPhone</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">android</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userAgent.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(Android);</span><span style="color:#F97583;">?</span><span style="color:#79B8FF;">[\\s</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#79B8FF;">]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[\\d.]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iphone</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userAgent.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(iPhone</span><span style="color:#79B8FF;">\\s</span><span style="color:#DBEDFF;">OS)</span><span style="color:#79B8FF;">\\s</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[\\d_]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果是Android或iPhone，则跳转至移动端站点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (android </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> iphone) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    location.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://m.jd.com&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 检测访问设备是否是手机端</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userAgent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> navigator.userAgent;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 验证是否为Android或iPhone</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">android</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userAgent.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(Android);</span><span style="color:#D73A49;">?</span><span style="color:#005CC5;">[\\s</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#005CC5;">]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[\\d.]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">/</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iphone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userAgent.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(iPhone</span><span style="color:#005CC5;">\\s</span><span style="color:#032F62;">OS)</span><span style="color:#005CC5;">\\s</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[\\d_]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果是Android或iPhone，则跳转至移动端站点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (android </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> iphone) {</span></span>
<span class="line"><span style="color:#24292E;">    location.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://m.jd.com&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230829125156849.png" alt="image-20230829125156849"></p><p><img src="https://post-src.wyun521.top/images/image-20230829125412648.png" alt="image-20230829125412648"></p><h4 id="history-对象" tabindex="-1">history 对象 <a class="header-anchor" href="#history-对象" aria-label="Permalink to &quot;history 对象&quot;">​</a></h4><p><code>history</code> 对象用来管理历史记录， 与浏览器地址栏的操作相对应，如前进、后退等</p><p><img src="https://post-src.wyun521.top/images/image-20230829222802302.png" alt="image-20230829222802302"></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;back&quot;</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#79B8FF;">&amp;lt;</span><span style="color:#E1E4E8;">后退&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;forward&quot;</span><span style="color:#E1E4E8;">&gt;前进</span><span style="color:#79B8FF;">&amp;gt;</span><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;back&quot;</span><span style="color:#24292E;">&gt;</span><span style="color:#005CC5;">&amp;lt;</span><span style="color:#24292E;">后退&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;forward&quot;</span><span style="color:#24292E;">&gt;前进</span><span style="color:#005CC5;">&amp;gt;</span><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.前进</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">forward</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.forward&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">forward.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 相当于history.forward()</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 2.后退</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">back</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.back&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">back.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 相当于history.back()</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.前进</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">forward</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.forward&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">forward.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 相当于history.forward()</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 2.后退</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">back</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.back&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">back.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 相当于history.back()</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><blockquote><p>history 对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到</p></blockquote><h3 id="本地存储" tabindex="-1">本地存储 <a class="header-anchor" href="#本地存储" aria-label="Permalink to &quot;本地存储&quot;">​</a></h3><p><code>本地存储</code>：将数据直接存储在用户浏览器上。<a href="https://todomvc.com/examples/vanilla-es6/" target="_blank" rel="noreferrer">一个使用 localStorage 进行本地存储的待办事项网站</a></p><p><code>本地存储的两种方式</code>：</p><ul><li><code>localStorage</code>：本地存储，刷新页面或关闭浏览器，数据永不丢失（除非手动删除）</li><li><code>sessionStorage</code>：会话存储，关闭标签页或浏览器后数据会被清除</li></ul><p>操作数据的方法有：</p><ul><li><code>setItem(key,value)</code>：在本地存储中添加数据</li><li><code>getItem(key)</code>：获取本地存储中的数据</li><li><code>removeItem(key)</code>：删除本地存储中的数据</li><li><code>clear()</code>：清空本地存储中的数据（慎用）</li></ul><blockquote><p>本地存储数据只能由字符串类型的键和值组成</p></blockquote><p><strong>两种本地存储方式的对比</strong></p><p>先分别存储一个数据：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">localStorage.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;王聪聪&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sessionStorage.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王聪聪&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sessionStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在控制台打印它们：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sessionStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sessionStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230829114249785.png" alt="image-20230829114249785"></p><p>关闭浏览器后重新打开：</p><p><img src="https://post-src.wyun521.top/images/image-20230829114850815.png" alt="image-20230829114850815"></p><blockquote><p>可以发现，sessionStorage 中的数据已经失效，而 localStorage 中的数据还在</p></blockquote><p><strong>本地存储的控制台操作</strong></p><p>我们可以直接在控制台查看和操作本地存储中的数据：</p><p><img src="https://post-src.wyun521.top/images/image-20230829114606969.png" alt="image-20230829114606969"></p><p><strong>复杂类型数据的本地存储</strong></p><p>本地存储只能存储字符串，无法存储复杂类型的数据。我们可以先将复杂类型数据转换成 json 字符串，然后再存储到本地</p><ul><li><code>JSON.stringify()</code>：将复杂类型数据转换成 json 字符串</li><li><code>JSON.parse()</code>：将 json 字符串解析成对象</li></ul><p>下面是一个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 本地存储复杂数据类型</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;小米&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  price: </span><span style="color:#79B8FF;">2998</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 把对象转换为JSON字符串  JSON.stringify()</span></span>
<span class="line"><span style="color:#E1E4E8;">localStorage.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mi&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(mi));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 把JSON字符串解析为对象  JSON.parse()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mi&quot;</span><span style="color:#E1E4E8;">)));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 本地存储复杂数据类型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;小米&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  price: </span><span style="color:#005CC5;">2998</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 把对象转换为JSON字符串  JSON.stringify()</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mi&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(mi));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 把JSON字符串解析为对象  JSON.parse()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mi&quot;</span><span style="color:#24292E;">)));</span></span></code></pre></div><p><strong>渲染页面的新方式</strong></p><p>我们常使用下面两个方法渲染页面：</p><ul><li><p><code>map(fn)</code>：将每个数组元素映射到一个函数中处理，并返回处理后的新数组</p></li><li><p><code>join(separator)</code>：将数组元素拼接成新的字符串，separator 分隔符</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{ uname: </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;"> }, { uname: </span><span style="color:#9ECBFF;">&quot;李四&quot;</span><span style="color:#E1E4E8;"> }, { uname: </span><span style="color:#9ECBFF;">&quot;王五&quot;</span><span style="color:#E1E4E8;"> }];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;div&gt;\${</span><span style="color:#E1E4E8;">ele</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">uname</span><span style="color:#9ECBFF;">}&lt;/div&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{ uname: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;"> }, { uname: </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;"> }, { uname: </span><span style="color:#032F62;">&quot;王五&quot;</span><span style="color:#24292E;"> }];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;div&gt;\${</span><span style="color:#24292E;">ele</span><span style="color:#032F62;">.</span><span style="color:#24292E;">uname</span><span style="color:#032F62;">}&lt;/div&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">document.body.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str;</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230829224519803.png" alt="image-20230829224519803"></p><blockquote><p>这两个方法常和本地存储配合使用，共同完成动态页面的渲染</p></blockquote>`,54),e=[p];function t(c,r,E,y,i,F){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{d as __pageData,g as default};
