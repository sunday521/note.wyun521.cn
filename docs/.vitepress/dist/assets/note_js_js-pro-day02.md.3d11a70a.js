import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.cc795e4d.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/js/js-pro-day02.md","filePath":"note/js/js-pro-day02.md"}'),p={name:"note/js/js-pro-day02.md"},o=l(`<h2 id="js-高级第二天" tabindex="-1">js 高级第二天 <a class="header-anchor" href="#js-高级第二天" aria-label="Permalink to &quot;js 高级第二天&quot;">​</a></h2><h3 id="对象深入" tabindex="-1">对象深入 <a class="header-anchor" href="#对象深入" aria-label="Permalink to &quot;对象深入&quot;">​</a></h3><h4 id="一切皆对象" tabindex="-1">一切皆对象 <a class="header-anchor" href="#一切皆对象" aria-label="Permalink to &quot;一切皆对象&quot;">​</a></h4><p>为什么字符串也会有属性和方法？方法不是对象才有的吗？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//h</span></span></code></pre></div><blockquote><p>实际上，js 中所有数据都可以看做一个对象，使用不同的构造函数创建出来的对象拥有不同的属性和方法</p></blockquote><h4 id="面向对象的概念" tabindex="-1">面向对象的概念 <a class="header-anchor" href="#面向对象的概念" aria-label="Permalink to &quot;面向对象的概念&quot;">​</a></h4><p><strong>两种编程思想</strong></p><p><code>面向过程</code>：按照分析好的步骤，一步一步地的去解决问题。特点：性能较高、不灵活</p><p><code>面向对象</code>：按功能划分对象，各个对象之间相互调用，共同解决问题。特点：性能较低、更灵活</p><blockquote><p>封装、继承和多态是面向对象的三个特性</p></blockquote><blockquote><p>js 中还是以面向过程编程为主，更符合开发习惯</p></blockquote><h4 id="创建对象的两种方式" tabindex="-1">创建对象的两种方式 <a class="header-anchor" href="#创建对象的两种方式" aria-label="Permalink to &quot;创建对象的两种方式&quot;">​</a></h4><p>js 中有两种创建对象的方式：</p><ul><li>使用字面量直接创建</li><li>使用构造函数创建多个对象</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.使用字面量直接创建</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pq</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pname: </span><span style="color:#9ECBFF;">&quot;佩奇&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 2.使用构造函数实例化</span></span>
<span class="line"><span style="color:#6A737D;">// 构造函数是一个特殊的函数，用来创建对象</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pig</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">pname</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">age</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// this代指要创建的实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pname;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 实例化两个对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pq</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;佩奇&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">qz</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;乔治&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.使用字面量直接创建</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pq</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  pname: </span><span style="color:#032F62;">&quot;佩奇&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 2.使用构造函数实例化</span></span>
<span class="line"><span style="color:#6A737D;">// 构造函数是一个特殊的函数，用来创建对象</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pig</span><span style="color:#24292E;">(</span><span style="color:#E36209;">pname</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// this代指要创建的实例对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pname;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 实例化两个对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pq</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;佩奇&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">qz</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;乔治&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span></code></pre></div><blockquote><p>构造函数的首字母一般大写</p></blockquote><blockquote><p>构造函数中没有 return，默认返回创建的实例对象</p></blockquote><p><strong>使用 new 创建对象的过程</strong></p><ol><li>先在内存中创建一个空的对象</li><li>让 this 指向这个空对象</li><li>执行构造函数中的代码，给空对象添加属性和值</li><li>将创建好的对象返回</li></ol><h4 id="静态成员和实例成员" tabindex="-1">静态成员和实例成员 <a class="header-anchor" href="#静态成员和实例成员" aria-label="Permalink to &quot;静态成员和实例成员&quot;">​</a></h4><p><code>静态成员</code>：构造函数本身的属性或方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pig</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Pig.eyes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 静态属性</span></span>
<span class="line"><span style="color:#E1E4E8;">Pig.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 静态方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pig</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Pig.eyes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 静态属性</span></span>
<span class="line"><span style="color:#24292E;">Pig.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 静态方法</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><code>实例成员</code>：实例对象中的属性或方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pq</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;佩奇&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">pq.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;小猪佩奇&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 实例属性</span></span>
<span class="line"><span style="color:#E1E4E8;">pq.</span><span style="color:#B392F0;">sayHi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 实例方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hi~&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// **实例对象不能访问静态成员**</span></span>
<span class="line"><span style="color:#E1E4E8;">pq.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Uncaught TypeError: pq.print is not a function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pq</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;佩奇&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">pq.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;小猪佩奇&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 实例属性</span></span>
<span class="line"><span style="color:#24292E;">pq.</span><span style="color:#6F42C1;">sayHi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 实例方法</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// **实例对象不能访问静态成员**</span></span>
<span class="line"><span style="color:#24292E;">pq.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Uncaught TypeError: pq.print is not a function</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//实例属性</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr2.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//也是实例属性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//实例属性</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr2.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//也是实例属性</span></span></code></pre></div><blockquote><p>静态方法中的 this 指向构造函数，实例方法中的 this 指向实例对象（箭头函数除外）</p></blockquote><h3 id="内置构造函数" tabindex="-1">内置构造函数 <a class="header-anchor" href="#内置构造函数" aria-label="Permalink to &quot;内置构造函数&quot;">​</a></h3><h4 id="object-类" tabindex="-1">Object 类 <a class="header-anchor" href="#object-类" aria-label="Permalink to &quot;Object 类&quot;">​</a></h4><ul><li><code>Object.keys(obj)</code>：获取对象中所有键的集合，返回一个数组</li><li><code>Object.values(obj)</code>：获取对象中所有值的集合，返回一个数组</li><li><code>Object.assign(newobj,obj)</code>：拷贝/合并对象，返回一个新对象</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pname: </span><span style="color:#9ECBFF;">&quot;佩奇&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(pig));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Object.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(pig));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  pname: </span><span style="color:#032F62;">&quot;佩奇&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(pig));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(pig));</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230902115242059.png" alt="image-20230902115242059"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Object.assign(新对象, 已有对象) 拷贝/合并一个对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pname: </span><span style="color:#9ECBFF;">&quot;佩奇&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newPig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { gender: </span><span style="color:#9ECBFF;">&quot;女&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(newPig, pig);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(newPig);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Object.assign(新对象, 已有对象) 拷贝/合并一个对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  pname: </span><span style="color:#032F62;">&quot;佩奇&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newPig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { gender: </span><span style="color:#032F62;">&quot;女&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(newPig, pig);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newPig);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230902115509486.png" alt="image-20230902115509486"></p><blockquote><p>assign 拷贝的对象与原对象无关，不会相互影响（拷贝的是对象的值，而不是引用）</p></blockquote><h4 id="array-类" tabindex="-1">Array 类 <a class="header-anchor" href="#array-类" aria-label="Permalink to &quot;Array 类&quot;">​</a></h4><blockquote><p><a href="http://c.biancheng.net/view/9356.html" target="_blank" rel="noreferrer">点击查阅 Array 的详细用法</a></p></blockquote><p><strong>会改变原数组的实例方法</strong></p><table><thead><tr><th>方法</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>pop</td><td>删除最后一个数组元素</td><td>返回删除的那个元素</td></tr><tr><td>shift</td><td>删除第一个数组元素</td><td>返回删除的那个元素</td></tr><tr><td>push</td><td>在数组末尾添加元素</td><td>返回新数组的长度</td></tr><tr><td>unshift</td><td>在数组开头添加元素</td><td>返回新数组的长度</td></tr><tr><td>splice</td><td>删除或替换数组元素</td><td>返回删除的所有元素（一个数组）</td></tr><tr><td>reverse</td><td>反转数组</td><td>返回操作后的原数组</td></tr><tr><td>sort</td><td>对数组进行排序</td><td>返回操作后的原数组</td></tr></tbody></table><p><strong>不改变原数组的实例方法</strong></p><table><thead><tr><th>方法</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>forEach</td><td>遍历数组，用来代替 for 循环</td><td>无返回值</td></tr><tr><td>map</td><td>映射数组，处理数组中的每个数组元素</td><td>返回一个新数组</td></tr><tr><td>filter</td><td>筛选数组，筛选出所有满足条件的数组元素</td><td>返回一个新数组</td></tr><tr><td>reduce</td><td>累加所有数组元素（从左到右）</td><td>返回累加后的结果（单个值）</td></tr><tr><td>concat</td><td>合并两个数组</td><td>返回一个新数组</td></tr><tr><td>join</td><td>将数组元素拼接为字符串</td><td>返回一个字符串</td></tr><tr><td>find</td><td>查找数组元素</td><td>返回满足条件的第一个数组元素或 undefined</td></tr><tr><td>findIndex</td><td>查找满足条件的数组元素的索引</td><td>返回满足条件的第一个数组元素的索引或-1</td></tr><tr><td>indexOf</td><td>查找某个数组元素的索引</td><td>返回数组元素第一次出现的索引或-1</td></tr><tr><td>includes</td><td>查找数组中是否存在某个值</td><td>返回一个布尔值</td></tr><tr><td>every</td><td>检查是否所有数组元素都满足条件</td><td>返回一个布尔值</td></tr><tr><td>some</td><td>检查是否有一个数组元素满足条件</td><td>返回一个布尔值</td></tr></tbody></table><p>下图是对一些数组方法的生动表述：</p><p><img src="https://post-src.wyun521.top/images/image-20230902223428622.png" alt="image-20230902223428622"></p><p><strong>将伪数组转为真数组</strong></p><p>数组的静态方法 <code>Array.from()</code> 可以将伪数组转换为真数组，返回的真数组能够调用数组中的方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Array.from(伪数组)</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ele);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Array.from(伪数组)</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ele);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>reduce 累加求和</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">// prev 上一次return的结果</span></span>
<span class="line"><span style="color:#6A737D;">// ele 数组中的每个元素</span></span>
<span class="line"><span style="color:#6A737D;">// 0 指定的prev的初始值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">prev</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(prev, </span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">, ele, </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, prev </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> prev </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele;</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//15</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// prev 上一次return的结果</span></span>
<span class="line"><span style="color:#6A737D;">// ele 数组中的每个元素</span></span>
<span class="line"><span style="color:#6A737D;">// 0 指定的prev的初始值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">prev</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ele</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(prev, </span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">, ele, </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, prev </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prev </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele;</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//15</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230902152538072.png" alt="image-20230902152538072"></p><p><strong>计算总薪资</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    salary: </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;李四&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    salary: </span><span style="color:#79B8FF;">15000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;王五&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    salary: </span><span style="color:#79B8FF;">20000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 需求1：计算所有人总薪资</span></span>
<span class="line"><span style="color:#6A737D;">// 可以使用数组的reduce方法求和</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">prev</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> prev </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele.salary, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sum); </span><span style="color:#6A737D;">// 45000</span></span>
<span class="line"><span style="color:#6A737D;">// 需求2：若每人涨薪30%，老板每月要多支出多少</span></span>
<span class="line"><span style="color:#6A737D;">// 还是求和</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">prev</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> prev </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ele.salary </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sum2); </span><span style="color:#6A737D;">// 13500</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    salary: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    salary: </span><span style="color:#005CC5;">15000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;王五&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    salary: </span><span style="color:#005CC5;">20000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 需求1：计算所有人总薪资</span></span>
<span class="line"><span style="color:#6A737D;">// 可以使用数组的reduce方法求和</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">prev</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ele</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> prev </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele.salary, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sum); </span><span style="color:#6A737D;">// 45000</span></span>
<span class="line"><span style="color:#6A737D;">// 需求2：若每人涨薪30%，老板每月要多支出多少</span></span>
<span class="line"><span style="color:#6A737D;">// 还是求和</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">prev</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ele</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> prev </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ele.salary </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sum2); </span><span style="color:#6A737D;">// 13500</span></span></code></pre></div><h4 id="string-类" tabindex="-1">String 类 <a class="header-anchor" href="#string-类" aria-label="Permalink to &quot;String 类&quot;">​</a></h4><blockquote><p><a href="https://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noreferrer">点击查阅 String 的详细用法</a></p></blockquote><table><thead><tr><th>方法</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>trim</td><td>移除字符串两端的空格</td><td>返回一个新字符串</td></tr><tr><td>split</td><td>将字符串拆分为数组</td><td>返回一个数组</td></tr><tr><td>substring</td><td>截取字符串的部分</td><td>返回一个新字符串</td></tr><tr><td>slice</td><td>提取字符串的部分</td><td>返回一个新字符串</td></tr><tr><td>repeat</td><td>将字符串重复若干次</td><td>返回一个新字符串</td></tr><tr><td>replace</td><td>替换部分字符串，支持正则匹配</td><td>返回一个新字符串</td></tr><tr><td>match</td><td>查找字符串，支持正则匹配</td><td>返回一个数组</td></tr><tr><td>toUpperCase</td><td>将字符串中所有字符转换为大写形式</td><td>返回一个新字符串</td></tr><tr><td>toLowerCase</td><td>将字符串中所有字符转换为小写形式</td><td>返回一个新字符串</td></tr><tr><td>charAt</td><td>根据索引查找某个字符</td><td>返回一个字符</td></tr><tr><td>indexOf</td><td>查找字符的索引</td><td>返回字符第一次出现的索引或-1</td></tr><tr><td>startsWith</td><td>检测字符串是否以某字符开头</td><td>返回一个布尔值</td></tr><tr><td>endsWith</td><td>检测字符串是否以某字符结尾</td><td>返回一个布尔值</td></tr><tr><td>includes</td><td>检测字符串是否包含某个字符</td><td>返回一个布尔值</td></tr></tbody></table><p><strong>字符串基础方法示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello World!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// split 将字符串拆分为数组</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// [&#39;Hello World!&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;W&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;, &#39;!&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// [&#39;Hello&#39;, &#39;World!&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// substring 截取字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// Hello World!</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// World!</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// World</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// startsWith 检查字符串是否以指定字符开头</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;H&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// includes 检查字符串是否包含指定字符</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;el&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;or&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// split 将字符串拆分为数组</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// [&#39;Hello World!&#39;]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;W&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;, &#39;!&#39;]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// [&#39;Hello&#39;, &#39;World!&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// substring 截取字符串</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// Hello World!</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// World!</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// World</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// startsWith 检查字符串是否以指定字符开头</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;H&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// includes 检查字符串是否包含指定字符</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;el&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;or&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//true</span></span></code></pre></div><p><strong>翻转字符串</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 先将字符串转为数组，再调用数组的 reverse 方法进行翻转</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reverseStr</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">reverse</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">reverseStr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;今天天气真好！&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 先将字符串转为数组，再调用数组的 reverse 方法进行翻转</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reverseStr</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">reverseStr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;今天天气真好！&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p><strong>显示赠品案例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gift</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;50g茶叶,清洗球&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.zeng&quot;</span><span style="color:#E1E4E8;">).innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gift</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;p&gt;【赠品】\${</span><span style="color:#E1E4E8;">ele</span><span style="color:#9ECBFF;">}&lt;/p&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">gift</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;50g茶叶,清洗球&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.zeng&quot;</span><span style="color:#24292E;">).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gift</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;p&gt;【赠品】\${</span><span style="color:#24292E;">ele</span><span style="color:#032F62;">}&lt;/p&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230902170850980.png" alt="image-20230902170850980"></p><h4 id="number-类" tabindex="-1">Number 类 <a class="header-anchor" href="#number-类" aria-label="Permalink to &quot;Number 类&quot;">​</a></h4><blockquote><p><a href="http://c.biancheng.net/view/9354.html" target="_blank" rel="noreferrer">点击查阅 Number 的详细用法</a></p></blockquote><ul><li><code>toFixed(n)</code>：保留几位小数</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">num.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 99.00</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">num.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 99.00</span></span></code></pre></div>`,65),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
