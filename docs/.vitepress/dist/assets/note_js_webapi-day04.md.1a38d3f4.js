import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.cc795e4d.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/js/webapi-day04.md","filePath":"note/js/webapi-day04.md"}'),p={name:"note/js/webapi-day04.md"},o=l(`<h2 id="webapi-day04" tabindex="-1">webapi-day04 <a class="header-anchor" href="#webapi-day04" aria-label="Permalink to &quot;webapi-day04&quot;">​</a></h2><h3 id="date-日期对象" tabindex="-1">Date 日期对象 <a class="header-anchor" href="#date-日期对象" aria-label="Permalink to &quot;Date 日期对象&quot;">​</a></h3><h4 id="date-的实例化" tabindex="-1">Date 的实例化 <a class="header-anchor" href="#date-的实例化" aria-label="Permalink to &quot;Date 的实例化&quot;">​</a></h4><p>Date 是 JavaScript 内置的日期对象，用来表示日期和时间</p><p>使用 <code>new</code> 关键字实例化一个 Date 对象：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.获取当前日期/时间</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(date);</span></span>
<span class="line"><span style="color:#6A737D;">// 2.获取指定日期/时间</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2000-07-07 09:00:00&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(date2);</span></span>
<span class="line"><span style="color:#6A737D;">// 3.获取指定日期/时间（使用时间戳）</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1693099960313</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(date3);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.获取当前日期/时间</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(date);</span></span>
<span class="line"><span style="color:#6A737D;">// 2.获取指定日期/时间</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">date2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2000-07-07 09:00:00&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(date2);</span></span>
<span class="line"><span style="color:#6A737D;">// 3.获取指定日期/时间（使用时间戳）</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">date3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1693099960313</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(date3);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230827093539833.png" alt="image-20230827093539833"></p><h4 id="date-的格式化" tabindex="-1">Date 的格式化 <a class="header-anchor" href="#date-的格式化" aria-label="Permalink to &quot;Date 的格式化&quot;">​</a></h4><p>日期方法允许您获取并设置日期值（年、月、日、时、分、秒、毫秒）：</p><table><thead><tr><th>方法</th><th>描述</th><th></th></tr></thead><tbody><tr><td>getFullYear()</td><td>年份 (四位数字)</td><td></td></tr><tr><td>getMonth()</td><td>月份 (0 ~ 11)，获取时要加一</td><td></td></tr><tr><td>getDate()</td><td>天 (1 ~ 31)</td><td></td></tr><tr><td>getHours()</td><td>小时 (0 ~ 23)</td><td></td></tr><tr><td>getMinutes()</td><td>分钟 (0 ~ 59)</td><td></td></tr><tr><td>getSeconds()</td><td>秒 (0 ~ 59)</td><td></td></tr><tr><td>getDay()</td><td>周几 (0 ~ 6)，0 代表周日</td><td></td></tr><tr><td>getTime()</td><td>时间戳，从 1970-01-01 00:00:00 至今的毫秒数</td><td></td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Date:&quot;</span><span style="color:#E1E4E8;">, date);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;year:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getFullYear</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;month:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getMonth</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 月份从0开始，0代表一月</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getDate</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;day:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getDay</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 0代表周日</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hours:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getHours</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;minutes:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getMinutes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;seconds:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;time:&quot;</span><span style="color:#E1E4E8;">, date.</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Date:&quot;</span><span style="color:#24292E;">, date);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;year:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getFullYear</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;month:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getMonth</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 月份从0开始，0代表一月</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;date:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getDate</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;day:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getDay</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 0代表周日</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hours:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getHours</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;minutes:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getMinutes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;seconds:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;time:&quot;</span><span style="color:#24292E;">, date.</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">());</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230827094024133.png" alt="image-20230827094024133"></p><blockquote><p>月份是从 0 开始的，所以获取时别忘了加一！</p></blockquote><blockquote><p>使用这些方法拼接字符串，可以自定义格式化后的日期形式</p></blockquote><p><strong>Date 对象的格式化</strong></p><p>JavaScript 提供了一些格式化 Date 对象的方法:</p><p><img src="https://post-src.wyun521.top/images/image-20230827100304936.png" alt="image-20230827100304936"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(date);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(date.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 日期加时间</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(date.</span><span style="color:#B392F0;">toLocaleDateString</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">//日期</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(date.</span><span style="color:#B392F0;">toLocaleTimeString</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">//时间</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(date);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(date.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 日期加时间</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(date.</span><span style="color:#6F42C1;">toLocaleDateString</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">//日期</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(date.</span><span style="color:#6F42C1;">toLocaleTimeString</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">//时间</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/image-20230827100605953.png" alt="image-20230827100605953"></p><blockquote><p><a href="https://www.w3school.com.cn/js/js_dates.asp" target="_blank" rel="noreferrer">点击查阅 Date 对象的详细用法</a></p></blockquote><h4 id="时间戳" tabindex="-1">时间戳 <a class="header-anchor" href="#时间戳" aria-label="Permalink to &quot;时间戳&quot;">​</a></h4><p><code>时间戳</code>：从 1970-01-01 00:00:00 至今的毫秒数</p><p><strong>获取时间戳的三种方式</strong></p><table><thead><tr><th>方法</th><th>特点</th></tr></thead><tbody><tr><td>+new Date()</td><td>本质是转换为数字，推荐使用</td></tr><tr><td>date.getTime()</td><td>需要先实例化一个 Date 对象</td></tr><tr><td>Date.now()</td><td>只能得到当前的时间戳（无需实例化）</td></tr></tbody></table><p><strong>eg.倒计时案例</strong></p><p>利用时间戳可以计算两个时间之间的差值，实现倒计时效果：</p><p><img src="https://post-src.wyun521.top/images/image-20230827102152117.png" alt="image-20230827102152117"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTimer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 截止时间戳（ms）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">endTime</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2023-08-27 12:30:00&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当前时间戳（ms）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nowTime</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 剩余秒数（s）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (endTime </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> nowTime) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 计算剩余时间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> h </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">((count </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">((count </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(count </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 不足补0</span></span>
<span class="line"><span style="color:#E1E4E8;">  h </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> h </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> h </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> h;</span></span>
<span class="line"><span style="color:#E1E4E8;">  m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">  s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 渲染到页面上</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#hour&quot;</span><span style="color:#E1E4E8;">).innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> h;</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#minutes&quot;</span><span style="color:#E1E4E8;">).innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#second&quot;</span><span style="color:#E1E4E8;">).innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 先调用一次</span></span>
<span class="line"><span style="color:#B392F0;">getTimer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 开启定时器</span></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getTimer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTimer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 截止时间戳（ms）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">endTime</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2023-08-27 12:30:00&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当前时间戳（ms）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nowTime</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 剩余秒数（s）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (endTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> nowTime) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 计算剩余时间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">((count </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">((count </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(count </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不足补0</span></span>
<span class="line"><span style="color:#24292E;">  h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> h;</span></span>
<span class="line"><span style="color:#24292E;">  m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">  s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 渲染到页面上</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#hour&quot;</span><span style="color:#24292E;">).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> h;</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#minutes&quot;</span><span style="color:#24292E;">).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#second&quot;</span><span style="color:#24292E;">).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 先调用一次</span></span>
<span class="line"><span style="color:#6F42C1;">getTimer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 开启定时器</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getTimer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/daojishi.gif" alt="daojishi"></p><h3 id="dom-节点操作" tabindex="-1">DOM 节点操作 <a class="header-anchor" href="#dom-节点操作" aria-label="Permalink to &quot;DOM 节点操作&quot;">​</a></h3><h4 id="什么是-dom-节点" tabindex="-1">什么是 DOM 节点 <a class="header-anchor" href="#什么是-dom-节点" aria-label="Permalink to &quot;什么是 DOM 节点&quot;">​</a></h4><p><code>DOM节点</code>：将 HTML 文档以树状结构直观的表现出来，树中的每个元素都是一个节点(Node)</p><ul><li>元素节点，如 html、body、div 等</li><li>属性节点，如 href、title 、class 等</li><li>文本节点，注释或标签内的文本</li></ul><h4 id="操作-dom-节点" tabindex="-1">操作 DOM 节点 <a class="header-anchor" href="#操作-dom-节点" aria-label="Permalink to &quot;操作 DOM 节点&quot;">​</a></h4><p>我们可以利用节点之间的关系快速查找和操作节点：</p><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>parentNode</td><td>查找直接父节点</td></tr><tr><td>children</td><td>查找所有子节点，返回一个伪数组</td></tr><tr><td>nextElementSibling</td><td>查找下一个兄弟节点</td></tr><tr><td>previousElementSibling</td><td>查找上一个兄弟节点</td></tr><tr><td>createElement()</td><td>创建新的节点（由 document 调用）</td></tr><tr><td>prepend()</td><td>在父元素最后一个子节点之后，插入节点元素</td></tr><tr><td>append()</td><td>在父元素第一个子节点之前，插入节点元素</td></tr><tr><td>remove()</td><td>移除节点</td></tr></tbody></table><blockquote><p>查找 DOM 节点时如果找不到，会返回 null</p></blockquote><blockquote><p>我们现在常使用拼接字符串来渲染页面，尽量不操作 DOM 节点（耗能）</p></blockquote><h4 id="重绘和回流" tabindex="-1">重绘和回流 <a class="header-anchor" href="#重绘和回流" aria-label="Permalink to &quot;重绘和回流&quot;">​</a></h4><p>回流：DOM 树中部分或全部元素的尺寸、结构、布局等发生改变时，浏览器就会对 html 文档进行重排和渲染</p><p>重绘：元素样式的改变并不影响它在文档流中的位置和文档布局时(比如：color、background-color、 outline 等)，会触发重绘</p><p><img src="https://post-src.wyun521.top/images/image-20230827174720522.png" alt="image-20230827174720522"></p><blockquote><p>重绘不一定引起回流，而回流一定会引起重绘</p></blockquote><h3 id="移动端交互" tabindex="-1">移动端交互 <a class="header-anchor" href="#移动端交互" aria-label="Permalink to &quot;移动端交互&quot;">​</a></h3><h4 id="触摸事件" tabindex="-1">触摸事件 <a class="header-anchor" href="#触摸事件" aria-label="Permalink to &quot;触摸事件&quot;">​</a></h4><p><img src="https://post-src.wyun521.top/images/image-20230827145100156.png" alt="image-20230827145100156"></p><h4 id="swiper-插件" tabindex="-1">Swiper 插件 <a class="header-anchor" href="#swiper-插件" aria-label="Permalink to &quot;Swiper 插件&quot;">​</a></h4><p><a href="https://www.swiper.com.cn/" target="_blank" rel="noreferrer">Swiper</a> 是一个开源、免费、强大的 <code>触摸滑动插件</code>，常用于移动端网站的内容触摸滑动，能实现触屏焦点图、触屏 Tab 切换、触屏轮播图切换等常用效果。使用步骤：</p><ol><li><p>点此 <a href="https://3.swiper.com.cn/download/index.html" target="_blank" rel="noreferrer">下载 Swiper3</a> 提供的 css 和 js 文件</p></li><li><p>在 <a href="https://3.swiper.com.cn/demo/index.html" target="_blank" rel="noreferrer">Swiper3 基础演示</a> 中找到你想要的效果，复制到代码中</p></li><li><p>查阅 <a href="https://3.swiper.com.cn/api/index.html" target="_blank" rel="noreferrer">Swiper3 官方文档</a> 进行自定义配置</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Swiper 配置举例</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mySwiper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Swiper</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.swiper-container&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  direction: </span><span style="color:#9ECBFF;">&quot;vertical&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 循环轮播</span></span>
<span class="line"><span style="color:#E1E4E8;">  loop: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果需要分页器</span></span>
<span class="line"><span style="color:#E1E4E8;">  pagination: </span><span style="color:#9ECBFF;">&quot;.swiper-pagination&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果需要前进后退按钮</span></span>
<span class="line"><span style="color:#E1E4E8;">  nextButton: </span><span style="color:#9ECBFF;">&quot;.swiper-button-next&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  prevButton: </span><span style="color:#9ECBFF;">&quot;.swiper-button-prev&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果需要滚动条</span></span>
<span class="line"><span style="color:#E1E4E8;">  scrollbar: </span><span style="color:#9ECBFF;">&quot;.swiper-scrollbar&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Swiper 配置举例</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mySwiper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Swiper</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.swiper-container&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  direction: </span><span style="color:#032F62;">&quot;vertical&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 循环轮播</span></span>
<span class="line"><span style="color:#24292E;">  loop: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果需要分页器</span></span>
<span class="line"><span style="color:#24292E;">  pagination: </span><span style="color:#032F62;">&quot;.swiper-pagination&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果需要前进后退按钮</span></span>
<span class="line"><span style="color:#24292E;">  nextButton: </span><span style="color:#032F62;">&quot;.swiper-button-next&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  prevButton: </span><span style="color:#032F62;">&quot;.swiper-button-prev&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果需要滚动条</span></span>
<span class="line"><span style="color:#24292E;">  scrollbar: </span><span style="color:#032F62;">&quot;.swiper-scrollbar&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h4 id="alloyfinger" tabindex="-1">AlloyFinger <a class="header-anchor" href="#alloyfinger" aria-label="Permalink to &quot;AlloyFinger&quot;">​</a></h4><p><a href="https://github.com/AlloyTeam/AlloyFinger" target="_blank" rel="noreferrer">AlloyFinger</a> 是腾讯 AlloyTeam 团队开源的轻量级 <code>Web手势插件</code>，能够为元素注册各种手势事件。使用步骤：</p><ol><li>引入 AlloyFinger 相关 js 文件</li><li>实例化 AlloyFinger 对象，<a href="https://github.com/AlloyTeam/AlloyFinger" target="_blank" rel="noreferrer">查阅文档</a> 进行相关配置</li><li>自定义事件触发时的操作</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 初始化AlloyFinger对象，自定义事件处理</span></span>
<span class="line"><span style="color:#6A737D;">// element 给谁绑定手势事件</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> af </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AlloyFinger</span><span style="color:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// touch 触摸</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">touchStart</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">touchMove</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">touchEnd</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// tap 点按</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">doubleTap</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// longTap 长按</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">longTap</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// swipe 划动</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">swipe</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;swipe&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.direction);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// swipe事件触发时要做的事情</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 初始化AlloyFinger对象，自定义事件处理</span></span>
<span class="line"><span style="color:#6A737D;">// element 给谁绑定手势事件</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> af </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AlloyFinger</span><span style="color:#24292E;">(element, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// touch 触摸</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">touchStart</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">touchMove</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">touchEnd</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// tap 点按</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">doubleTap</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// longTap 长按</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">longTap</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// swipe 划动</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">swipe</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;swipe&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.direction);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// swipe事件触发时要做的事情</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h4 id="通讯录综合案例" tabindex="-1">通讯录综合案例 <a class="header-anchor" href="#通讯录综合案例" aria-label="Permalink to &quot;通讯录综合案例&quot;">​</a></h4><p>在开始前，先了解几个前置知识~</p><p><strong>forEach 遍历数组</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// forEach遍历：数组每个元素都执行一次回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// i 数组元素的索引，ele 每个数组元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i, ele);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// forEach遍历：数组每个元素都执行一次回调函数</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// i 数组元素的索引，ele 每个数组元素</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i, ele);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>map 筛选数组</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// map筛选：通过指定函数处理数组的每个元素，并返回处理后的数组</span></span>
<span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// i 数组元素的索引，ele 每个数组元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i, ele);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// map筛选：通过指定函数处理数组的每个元素，并返回处理后的数组</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// i 数组元素的索引，ele 每个数组元素</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i, ele);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>substring 截取字符串</strong></p><p><img src="https://post-src.wyun521.top/images/image-20230827161947102.png" alt="image-20230827161947102"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> uname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;王聪聪&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rst </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> uname.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(uname.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(rst);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> uname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;王聪聪&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rst </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> uname.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(uname.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(rst);</span></span></code></pre></div><p><strong>用户代码片段</strong></p><p>在 <code>VSCode设置 &gt; 用户代码片段 &gt; 新建 &gt; 输入代码段文件名</code> 中，输入下面的模板：</p><p><img src="https://post-src.wyun521.top/images/image-20230828095946102.png" alt="image-20230828095946102"></p><p><strong>通讯录主要功能代码</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 业务2：绑定滑动事件</span></span>
<span class="line"><span style="color:#6A737D;">// 实现：引入AlloyFinger手势插件，循环给每个item绑定滑动事件</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initSwip</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelectorAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.item&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  items.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AlloyFinger</span><span style="color:#E1E4E8;">(ele, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swipe</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;swipe&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.direction);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是左滑</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.direction </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Left&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 排他：先清除其他删除按钮，再让自己的删除按钮显示</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">activeBtn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.address-book .active&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果有active的删除按钮，就移除</span></span>
<span class="line"><span style="color:#E1E4E8;">          activeBtn </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> activeBtn.classList.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;active&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          ele.classList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;active&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 业务2：绑定滑动事件</span></span>
<span class="line"><span style="color:#6A737D;">// 实现：引入AlloyFinger手势插件，循环给每个item绑定滑动事件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initSwip</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.item&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  items.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AlloyFinger</span><span style="color:#24292E;">(ele, {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swipe</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;swipe&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.direction);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是左滑</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.direction </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Left&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 排他：先清除其他删除按钮，再让自己的删除按钮显示</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">activeBtn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.address-book .active&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 如果有active的删除按钮，就移除</span></span>
<span class="line"><span style="color:#24292E;">          activeBtn </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> activeBtn.classList.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;active&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          ele.classList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;active&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 业务3：删除列表项</span></span>
<span class="line"><span style="color:#6A737D;">// 实现：如果直接循环给每个删除按钮绑定事件，后添加的item是不能绑定成功的</span></span>
<span class="line"><span style="color:#6A737D;">// 所以我们采用事件委托的方式，给父元素添加事件</span></span>
<span class="line"><span style="color:#6A737D;">// 另外，为了减少对DOM元素的直接操作，我们可以采用数据驱动视图的方式</span></span>
<span class="line"><span style="color:#6A737D;">// 点击删除按钮删除数组中的数据，然后重新渲染页面</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.target.tagName </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> e.target.tagName </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为了能获得删除的那个item，在渲染时加上自定义索引属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.target.dataset.index;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">flag</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">confirm</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;确定要删除吗？&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(flag);</span></span>
<span class="line"><span style="color:#E1E4E8;">    flag </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(index, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 重新渲染页面</span></span>
<span class="line"><span style="color:#E1E4E8;">    flag </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 点击取消将删除按钮收回</span></span>
<span class="line"><span style="color:#E1E4E8;">    flag </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      document</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.address-book .active&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .classList.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;active&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 业务3：删除列表项</span></span>
<span class="line"><span style="color:#6A737D;">// 实现：如果直接循环给每个删除按钮绑定事件，后添加的item是不能绑定成功的</span></span>
<span class="line"><span style="color:#6A737D;">// 所以我们采用事件委托的方式，给父元素添加事件</span></span>
<span class="line"><span style="color:#6A737D;">// 另外，为了减少对DOM元素的直接操作，我们可以采用数据驱动视图的方式</span></span>
<span class="line"><span style="color:#6A737D;">// 点击删除按钮删除数组中的数据，然后重新渲染页面</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.target.tagName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> e.target.tagName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为了能获得删除的那个item，在渲染时加上自定义索引属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.target.dataset.index;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">flag</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">confirm</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;确定要删除吗？&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(flag);</span></span>
<span class="line"><span style="color:#24292E;">    flag </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(index, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 重新渲染页面</span></span>
<span class="line"><span style="color:#24292E;">    flag </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 点击取消将删除按钮收回</span></span>
<span class="line"><span style="color:#24292E;">    flag </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      document</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.address-book .active&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .classList.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;active&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><img src="https://post-src.wyun521.top/images/tongxunlu.gif" alt="tongxunlu"></p><blockquote><p><a href="https://code.juejin.cn/pen/7271975587630022713" target="_blank" rel="noreferrer">点击查看通讯录案例完整代码</a></p></blockquote>`,71),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
